{"version":3,"sources":["Event.js","EventList.js","api.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","handleShowDetails","setState","event","this","props","className","local_date","local_time","name","group","venue","address_1","city","onClick","Component","EventList","events","map","key","id","AWS_AUTH_URL","MEETUP_AUTH_URL","MEETUP_QUERY_URL","getOrRenewAccessToken","type","a","url","axios","get","tokenInfo","localStorage","setItem","data","access_token","refresh_token","Date","now","console","log","clear","getSuggestions","query","window","location","href","startsWith","country","localized_country_name","name_string","zip","lat","lon","getAccessToken","token","result","getEvents","mockData","accessToken","getItem","searchParams","URLSearchParams","search","code","lastSavedTime","refreshToken","CitySearch","suggestions","handleInputChanged","value","target","then","handleItemClicked","updateEvents","onChange","item","NumberOfEvents","App","page","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f15f85d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n    state = {\r\n        showDetails: false,\r\n    }\r\n\r\n    handleShowDetails = () => {\r\n        if (this.state.showDetails === false) {\r\n            this.setState({ showDetails: true });\r\n        }\r\n        else {\r\n            this.setState({ showDetails: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { event } = this.props;\r\n\r\n        return (\r\n            <div className='event'>\r\n                <div>{event.local_date} {event.local_time}</div>\r\n                <div className='eventName name'>{event.name}</div>\r\n                {event.group && event.group.name && <div className='group-name'>Group: {event.group.name}</div>}\r\n                <div className='eventLocationAddress'>{(event.venue && event.venue.address_1) || ''}</div>\r\n                <div className='eventLocationCity'>{(event.venue && event.venue.city) || ''}</div>\r\n                <button className='eventDetailsButton details-btn' onClick={this.handleShowDetails}>Show Details</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"EventList\">\r\n                {this.props.events.map(event =>\r\n                    <li key={event.id}>\r\n                        <Event event={event} />\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventList;","import mockData from './__tests__/Event.test.MockData.json';\r\nimport axios from 'axios';\r\n\r\nconst AWS_AUTH_URL = 'https://2u37kmztke.execute-api.eu-central-1.amazonaws.com/dev/api/';\r\nconst MEETUP_AUTH_URL = 'https://secure.meetup.com/oauth2/authorize?client_id=3eb98ifv4i1k0873gckn7i8j6g&response_type=code&redirect_uri=https://maxzakh.github.io/meet-up/';\r\nconst MEETUP_QUERY_URL = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query=';\r\nconst MEETUP_UPCOMING_EVENTS_URL = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public';\r\n\r\nasync function getOrRenewAccessToken(type, key) {\r\n    let url;\r\n    if (type === 'get') {\r\n        url = `${AWS_AUTH_URL}token/${key}`;\r\n    } else if (type === 'renew') {\r\n        url = `${AWS_AUTH_URL}refresh/${key}`;\r\n    }\r\n\r\n    var tokenInfo;\r\n\r\n    try {\r\n        tokenInfo = await axios.get(url);\r\n        localStorage.setItem('access_token', tokenInfo.data.access_token);\r\n        localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\r\n        localStorage.setItem('last_saved_time', Date.now());\r\n    } catch (error) {\r\n        console.log(error);\r\n        console.log(tokenInfo);\r\n        localStorage.clear('access_token', tokenInfo.data.access_token);\r\n        localStorage.clear('refresh_token', tokenInfo.data.refresh_token);\r\n        localStorage.clear('last_saved_time', Date.now());\r\n        \r\n        url = `${AWS_AUTH_URL}token/${key}`;\r\n        tokenInfo = await axios.get(url);\r\n        localStorage.setItem('access_token', tokenInfo.data.access_token);\r\n        localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\r\n        localStorage.setItem('last_saved_time', Date.now());\r\n    }\r\n\r\n    return tokenInfo.data.access_token;\r\n}\r\n\r\nasync function getSuggestions(query) {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        return [\r\n            {\r\n                city: 'Munich',\r\n                country: 'de',\r\n                localized_country_name: 'Germany',\r\n                name_string: 'Munich, Germany',\r\n                zip: 'meetup3',\r\n                lat: 48.14,\r\n                lon: 11.58\r\n            },\r\n            {\r\n                city: 'Munich',\r\n                country: 'us',\r\n                localized_country_name: 'USA',\r\n                state: 'ND',\r\n                name_string: 'Munich, North Dakota, USA',\r\n                zip: '58352',\r\n                lat: 48.66,\r\n                lon: -98.85\r\n            }\r\n        ];\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n    if (token) {\r\n        const url = `${MEETUP_QUERY_URL}${query}&access_token=${token}`;\r\n        const result = await axios.get(url);\r\n        return result.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nasync function getEvents(lat, lon) {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        return mockData;\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n    if (token) {\r\n        let url = `${MEETUP_UPCOMING_EVENTS_URL}&access_token=${token}`;\r\n        if (lat && lon) {\r\n            url += '&lat=' + lat + '&lon=' + lon;\r\n        }\r\n        const result = await axios.get(url);\r\n        return result.data.events;\r\n    }\r\n}\r\n\r\nasync function getAccessToken() {\r\n    const accessToken = localStorage.getItem('access_token');\r\n\r\n    if (!accessToken) {\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = searchParams.get('code');\r\n\r\n        if (!code) {\r\n            window.location.href = MEETUP_AUTH_URL;\r\n            return null;\r\n        }\r\n        return getOrRenewAccessToken('get', code);\r\n    }\r\n\r\n    const lastSavedTime = localStorage.getItem('last_saved_time');\r\n\r\n    if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\r\n        return accessToken;\r\n    }\r\n\r\n    const refreshToken = localStorage.getItem('refresh_token');\r\n    return getOrRenewAccessToken('renew', refreshToken);\r\n}\r\n\r\nexport { getSuggestions, getEvents };","import React, { Component } from 'react';\r\nimport { getSuggestions } from './api';\r\n\r\nclass CitySearch extends Component {\r\n    state = {\r\n        query: '',\r\n        suggestions: []\r\n    }\r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({ query: value });\r\n        getSuggestions(value).then(suggestions => this.setState({ suggestions }));\r\n    }\r\n\r\n    handleItemClicked = (value, lat, lon) => {\r\n        this.setState({ query: value, suggestions: [] });\r\n        this.props.updateEvents(lat, lon);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CitySearch\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"city\"\r\n                    value={this.state.query}\r\n                    onChange={this.handleInputChanged}\r\n                />\r\n                <ul className=\"suggestions\">\r\n                    {this.state.suggestions.map(item =>\r\n                        <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)}>{item.name_string}</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n    state = {\r\n        query: 32\r\n    };\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className='numberOfEvents'>{this.state.query}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { getEvents } from './api';\n\nclass App extends Component {\n  state = {\n    events: [],\n    page: null\n  }\n\n  updateEvents = (lat, lon, page) => {\n    if (lat && lon) {\n      getEvents(lat, lon, this.state.page).then(events => \n        this.setState({ events, lat, lon })\n      );\n    } else if (page) {\n      getEvents(this.state.lat, this.state.lon, page).then(events =>\n        this.setState({ events, page})\n      );\n    } else {\n      getEvents(this.state.lat, this.state.lon, this.state.page).then(events => \n        this.setState({ events })\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}