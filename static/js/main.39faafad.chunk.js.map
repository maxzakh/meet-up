{"version":3,"sources":["Event.js","EventList.js","api.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","handleShowDetails","setState","event","this","props","className","local_date","local_time","name","group","venue","address_1","city","onClick","Component","EventList","events","map","key","id","AWS_AUTH_URL","MEETUP_AUTH_URL","MEETUP_QUERY_URL","getOrRenewAccessToken","type","a","urlPart","url","localStorage","removeItem","axios","get","tokenInfo","setItem","data","access_token","refresh_token","Date","now","getSuggestions","query","window","location","href","startsWith","country","localized_country_name","name_string","zip","lat","lon","resultData","getAccessToken","token","console","log","result","getEvents","mockData","resultEvents","suffix","accessToken","getItem","searchParams","URLSearchParams","search","code","lastSavedTime","refreshToken","CitySearch","suggestions","handleInputChanged","value","target","then","handleItemClicked","updateEvents","onChange","item","NumberOfEvents","App","page","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.39faafad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n    state = {\r\n        showDetails: false,\r\n    }\r\n\r\n    handleShowDetails = () => {\r\n        if (this.state.showDetails === false) {\r\n            this.setState({ showDetails: true });\r\n        }\r\n        else {\r\n            this.setState({ showDetails: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { event } = this.props;\r\n\r\n        return (\r\n            <div className='event'>\r\n                <div>{event.local_date} {event.local_time}</div>\r\n                <div className='eventName name'>{event.name}</div>\r\n                {event.group && event.group.name && <div className='group-name'>Group: {event.group.name}</div>}\r\n                <div className='eventLocationAddress'>{(event.venue && event.venue.address_1) || ''}</div>\r\n                <div className='eventLocationCity'>{(event.venue && event.venue.city) || ''}</div>\r\n                <button className='eventDetailsButton details-btn' onClick={this.handleShowDetails}>Show Details</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n    render() {\r\n        return (\r\n            <ul className=\"EventList\">\r\n                {this.props.events.map(event =>\r\n                    <li key={event.id}>\r\n                        <Event event={event} />\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventList;","import mockData from './__tests__/Event.test.MockData.json';\r\nimport axios from 'axios';\r\n\r\nconst AWS_AUTH_URL = 'https://2u37kmztke.execute-api.eu-central-1.amazonaws.com/dev/api/';\r\nconst MEETUP_AUTH_URL = 'https://secure.meetup.com/oauth2/authorize?client_id=3eb98ifv4i1k0873gckn7i8j6g&response_type=code&redirect_uri=https://maxzakh.github.io/meet-up/';\r\nconst MEETUP_QUERY_URL = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query=';\r\nconst MEETUP_UPCOMING_EVENTS_URL = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public';\r\n\r\nasync function getOrRenewAccessToken(type, key) {\r\n    const urlPart = type === 'get' ? 'token' : type === 'renew' ? 'refresh' : '?';\r\n    let url = `${AWS_AUTH_URL}${urlPart}/${key}`;\r\n\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('last_saved_time');\r\n\r\n    const tokenInfo = await axios.get(url);\r\n\r\n    localStorage.setItem('access_token', tokenInfo.data.access_token);\r\n    localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\r\n    localStorage.setItem('last_saved_time', Date.now());\r\n\r\n    return tokenInfo.data.access_token;\r\n}\r\n\r\nasync function getSuggestions(query) {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        return [\r\n            {\r\n                city: 'Munich',\r\n                country: 'de',\r\n                localized_country_name: 'Germany',\r\n                name_string: 'Munich, Germany',\r\n                zip: 'meetup3',\r\n                lat: 48.14,\r\n                lon: 11.58\r\n            },\r\n            {\r\n                city: 'Munich',\r\n                country: 'us',\r\n                localized_country_name: 'USA',\r\n                state: 'ND',\r\n                name_string: 'Munich, North Dakota, USA',\r\n                zip: '58352',\r\n                lat: 48.66,\r\n                lon: -98.85\r\n            }\r\n        ];\r\n    }\r\n\r\n    let resultData = [];\r\n    try {\r\n        const token = await getAccessToken();\r\n        console.log('resultData token', token);\r\n        const url = `${MEETUP_QUERY_URL}${query}&access_token=${token}`;\r\n        const result = await axios.get(url);\r\n        resultData = result.data;\r\n    } catch (error) {\r\n        console.log('resultData', error);\r\n    }\r\n    return resultData;\r\n}\r\n\r\nasync function getEvents(lat, lon) {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        return mockData;\r\n    }\r\n\r\n    let resultEvents = [];\r\n    try {\r\n        const token = await getAccessToken();\r\n\r\n        let suffix = (lat && lon) ? `&lat=${lat}&lon=${lon}` : '';\r\n        let url = `${MEETUP_UPCOMING_EVENTS_URL}&access_token=${token}${suffix}`;\r\n        \r\n        const result = await axios.get(url);\r\n        resultEvents = result.data.events;\r\n    } catch (error) {\r\n        console.log('cannot get events', error);\r\n    }\r\n    return resultEvents;\r\n}\r\n\r\nasync function getAccessToken() {\r\n    const accessToken = localStorage.getItem('access_token');\r\n\r\n    if (!accessToken) {\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = searchParams.get('code');\r\n        console.log('url code \"', code, '\"');\r\n\r\n        if (!code) {\r\n            window.location.href = MEETUP_AUTH_URL;\r\n            return null;\r\n        }\r\n        return getOrRenewAccessToken('get', code);\r\n    }\r\n\r\n    const lastSavedTime = localStorage.getItem('last_saved_time');\r\n\r\n    if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\r\n        return accessToken;\r\n    }\r\n\r\n    const refreshToken = localStorage.getItem('refresh_token');\r\n    return getOrRenewAccessToken('renew', refreshToken);\r\n}\r\n\r\nexport { getSuggestions, getEvents };","import React, { Component } from 'react';\r\nimport { getSuggestions } from './api';\r\n\r\nclass CitySearch extends Component {\r\n    state = {\r\n        query: '',\r\n        suggestions: []\r\n    }\r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({ query: value });\r\n        function askServer(suggestions) {\r\n            return this.setState({ suggestions });\r\n        }\r\n        getSuggestions(value).then(askServer);\r\n    }\r\n\r\n    handleItemClicked = (value, lat, lon) => {\r\n        this.setState({ query: value, suggestions: [] });\r\n        this.props.updateEvents(lat, lon);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CitySearch\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"city\"\r\n                    value={this.state.query}\r\n                    onChange={this.handleInputChanged}\r\n                />\r\n                <ul className=\"suggestions\">\r\n                    {this.state.suggestions.map(item =>\r\n                        <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)}>{item.name_string}</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n    state = {\r\n        query: 32\r\n    };\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className='numberOfEvents'>{this.state.query}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { getEvents } from './api';\n\nclass App extends Component {\n  state = {\n    events: [],\n    page: null\n  }\n\n  updateEvents = (lat, lon, page) => {\n    if (lat && lon) {\n      getEvents(lat, lon, this.state.page).then(events => \n        this.setState({ events, lat, lon })\n      );\n    } else if (page) {\n      getEvents(this.state.lat, this.state.lon, page).then(events =>\n        this.setState({ events, page})\n      );\n    } else {\n      getEvents(this.state.lat, this.state.lon, this.state.page).then(events => \n        this.setState({ events })\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}